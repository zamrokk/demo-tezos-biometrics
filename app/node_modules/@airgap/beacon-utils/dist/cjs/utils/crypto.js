"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isValidAddress = exports.signMessage = exports.recipientString = exports.prefixPublicKey = exports.getAddressFromPublicKey = exports.openCryptobox = exports.sealCryptobox = exports.decryptCryptoboxPayload = exports.encryptCryptoboxPayload = exports.getKeypairFromSeed = exports.getHexHash = exports.toHex = exports.secretbox_MACBYTES = exports.secretbox_NONCEBYTES = void 0;
const bs58check = require("bs58check");
const nacl_1 = require("@stablelib/nacl");
const random_1 = require("@stablelib/random");
const utf8_1 = require("@stablelib/utf8");
const blake2b_1 = require("@stablelib/blake2b");
const ed25519_1 = require("@stablelib/ed25519");
const ed25519_2 = require("@stablelib/ed25519");
const blake2b_2 = require("@stablelib/blake2b");
const bytes_1 = require("@stablelib/bytes");
const ed25519_3 = require("@stablelib/ed25519");
exports.secretbox_NONCEBYTES = 24; // crypto_secretbox_NONCEBYTES
exports.secretbox_MACBYTES = 16; // crypto_secretbox_MACBYTES
/* eslint-disable prefer-arrow/prefer-arrow-functions */
/**
 * Convert a value to hex
 *
 * @param value
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function toHex(value) {
    return Buffer.from(value).toString('hex');
}
exports.toHex = toHex;
/**
 * Get the hex hash of a value
 *
 * @param key
 */
function getHexHash(key) {
    return __awaiter(this, void 0, void 0, function* () {
        if (typeof key === 'string') {
            return toHex((0, blake2b_1.hash)((0, utf8_1.encode)(key), 32));
        }
        return toHex((0, blake2b_1.hash)(key, 32));
    });
}
exports.getHexHash = getHexHash;
/**
 * Get a keypair from a seed
 *
 * @param seed
 */
function getKeypairFromSeed(seed) {
    return __awaiter(this, void 0, void 0, function* () {
        return (0, ed25519_1.generateKeyPairFromSeed)((0, blake2b_1.hash)((0, utf8_1.encode)(seed), 32));
    });
}
exports.getKeypairFromSeed = getKeypairFromSeed;
/**
 * Encrypt a message with a shared key
 *
 * @param message
 * @param sharedKey
 */
function encryptCryptoboxPayload(message, sharedKey) {
    return __awaiter(this, void 0, void 0, function* () {
        const nonce = Buffer.from((0, random_1.randomBytes)(exports.secretbox_NONCEBYTES));
        const combinedPayload = Buffer.concat([
            nonce,
            Buffer.from((0, nacl_1.secretBox)(sharedKey, nonce, Buffer.from(message, 'utf8')))
        ]);
        return toHex(combinedPayload);
    });
}
exports.encryptCryptoboxPayload = encryptCryptoboxPayload;
/**
 * Decrypt a message with a shared key
 *
 * @param payload
 * @param sharedKey
 */
function decryptCryptoboxPayload(payload, sharedKey) {
    return __awaiter(this, void 0, void 0, function* () {
        const nonce = payload.slice(0, exports.secretbox_NONCEBYTES);
        const ciphertext = payload.slice(exports.secretbox_NONCEBYTES);
        const openBox = (0, nacl_1.openSecretBox)(sharedKey, nonce, ciphertext);
        if (!openBox) {
            throw new Error('Decryption failed');
        }
        return Buffer.from(openBox).toString('utf8');
    });
}
exports.decryptCryptoboxPayload = decryptCryptoboxPayload;
/**
 * Encrypt a message with a public key
 *
 * @param payload
 * @param publicKey
 */
function sealCryptobox(payload, otherPublicKey) {
    return __awaiter(this, void 0, void 0, function* () {
        const kxOtherPublicKey = (0, ed25519_2.convertPublicKeyToX25519)(Buffer.from(otherPublicKey)); // Secret bytes to scalar bytes
        const keypair = (0, nacl_1.generateKeyPair)();
        const state = new blake2b_2.BLAKE2b(24);
        const nonce = state.update(keypair.publicKey, 32).update(kxOtherPublicKey, 32).digest();
        const bytesPayload = typeof payload === 'string' ? (0, utf8_1.encode)(payload) : payload;
        const encryptedMessage = (0, nacl_1.box)(kxOtherPublicKey, keypair.secretKey, nonce, bytesPayload);
        return toHex((0, bytes_1.concat)(keypair.publicKey, encryptedMessage));
    });
}
exports.sealCryptobox = sealCryptobox;
/**
 * Decrypt a message with public + private key
 *
 * @param encryptedPayload
 * @param publicKey
 * @param privateKey
 */
function openCryptobox(encryptedPayload, publicKey, privateKey) {
    return __awaiter(this, void 0, void 0, function* () {
        const kxSelfPrivateKey = (0, ed25519_2.convertSecretKeyToX25519)(Buffer.from(privateKey)); // Secret bytes to scalar bytes
        const kxSelfPublicKey = (0, ed25519_2.convertPublicKeyToX25519)(Buffer.from(publicKey)); // Secret bytes to scalar bytes
        const bytesPayload = typeof encryptedPayload === 'string' ? (0, utf8_1.encode)(encryptedPayload) : encryptedPayload;
        const epk = bytesPayload.slice(0, 32);
        const ciphertext = bytesPayload.slice(32);
        const state = new blake2b_2.BLAKE2b(24);
        const nonce = state.update(epk, 32).update(kxSelfPublicKey, 32).digest();
        const decryptedMessage2 = (0, nacl_1.openBox)(epk, kxSelfPrivateKey, nonce, ciphertext);
        if (!decryptedMessage2) {
            throw new Error('Decryption failed');
        }
        return Buffer.from(decryptedMessage2).toString();
    });
}
exports.openCryptobox = openCryptobox;
/**
 * Get an address from the public key
 *
 * @param publicKey
 */
function getAddressFromPublicKey(publicKey) {
    return __awaiter(this, void 0, void 0, function* () {
        const prefixes = {
            // tz1...
            edpk: {
                length: 54,
                prefix: Buffer.from(new Uint8Array([6, 161, 159]))
            },
            // tz2...
            sppk: {
                length: 55,
                prefix: Buffer.from(new Uint8Array([6, 161, 161]))
            },
            // tz3...
            p2pk: {
                length: 55,
                prefix: Buffer.from(new Uint8Array([6, 161, 164]))
            }
        };
        let prefix;
        let plainPublicKey;
        if (publicKey.length === 64) {
            prefix = prefixes.edpk.prefix;
            plainPublicKey = publicKey;
        }
        else {
            const entries = Object.entries(prefixes);
            for (let index = 0; index < entries.length; index++) {
                const [key, value] = entries[index];
                if (publicKey.startsWith(key) && publicKey.length === value.length) {
                    prefix = value.prefix;
                    const decoded = bs58check.decode(publicKey);
                    plainPublicKey = decoded.slice(key.length, decoded.length).toString('hex');
                    break;
                }
            }
        }
        if (!prefix || !plainPublicKey) {
            throw new Error(`invalid publicKey: ${publicKey}`);
        }
        const payload = (0, blake2b_1.hash)(Buffer.from(plainPublicKey, 'hex'), 20);
        return bs58check.encode(Buffer.concat([prefix, Buffer.from(payload)]));
    });
}
exports.getAddressFromPublicKey = getAddressFromPublicKey;
/**
 * Prefix the public key if it's not prefixed
 *
 * @param publicKey
 */
function prefixPublicKey(publicKey) {
    return __awaiter(this, void 0, void 0, function* () {
        if (publicKey.length !== 64) {
            return publicKey;
        }
        const payload = Buffer.from(publicKey, 'hex');
        return bs58check.encode(Buffer.concat([new Uint8Array([13, 15, 37, 217]), Buffer.from(payload)]));
    });
}
exports.prefixPublicKey = prefixPublicKey;
/**
 * Get the recipient string used in the matrix message
 *
 * @param recipientHash
 * @param relayServer
 */
function recipientString(recipientHash, relayServer) {
    return `@${recipientHash}:${relayServer}`;
}
exports.recipientString = recipientString;
const toBuffer = (message) => __awaiter(void 0, void 0, void 0, function* () {
    if (message.length % 2 !== 0) {
        return (0, utf8_1.encode)(message);
    }
    let adjustedMessage = message;
    if (message.startsWith('0x')) {
        adjustedMessage = message.slice(2);
    }
    const buffer = Buffer.from(adjustedMessage, 'hex');
    if (buffer.length === adjustedMessage.length / 2) {
        return buffer;
    }
    return (0, utf8_1.encode)(message);
});
const coinlibhash = (message, size = 32) => __awaiter(void 0, void 0, void 0, function* () {
    return (0, blake2b_1.hash)(message, size);
});
const signMessage = (message, keypair) => __awaiter(void 0, void 0, void 0, function* () {
    const bufferMessage = yield toBuffer(message);
    const edsigPrefix = new Uint8Array([9, 245, 205, 134, 18]);
    const hash = yield coinlibhash(bufferMessage);
    const rawSignature = (0, ed25519_3.sign)(keypair.secretKey, hash);
    const signature = bs58check.encode(Buffer.concat([Buffer.from(edsigPrefix), Buffer.from(rawSignature)]));
    return signature;
});
exports.signMessage = signMessage;
const isValidAddress = (address) => {
    const prefixes = ['tz1', 'tz2', 'tz3', 'tz4', 'KT1', 'txr1', 'sr1'];
    if (!prefixes.some((p) => address.toLowerCase().startsWith(p.toLowerCase()))) {
        return false;
    }
    try {
        bs58check.decode(address);
    }
    catch (error) {
        return false;
    }
    return true;
};
exports.isValidAddress = isValidAddress;
/* eslint-enable prefer-arrow/prefer-arrow-functions */
//# sourceMappingURL=crypto.js.map