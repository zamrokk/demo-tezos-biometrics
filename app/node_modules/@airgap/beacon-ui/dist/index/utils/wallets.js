export var OSLink;
(function (OSLink) {
    OSLink[OSLink["WEB"] = 0] = "WEB";
    OSLink[OSLink["IOS"] = 1] = "IOS";
    OSLink[OSLink["DESKTOP"] = 2] = "DESKTOP";
    OSLink[OSLink["EXTENSION"] = 3] = "EXTENSION";
})(OSLink || (OSLink = {}));
export function parseWallets(wallets) {
    return wallets.map((wallet) => {
        const tokens = ['Web', 'web', 'App', 'app', 'Mobile', 'mobile'];
        for (let i = 0; i < tokens.length; i++) {
            if (wallet.name.includes(tokens[i]))
                wallet.name = wallet.name.replace(tokens[i], '');
        }
        wallet.name = wallet.name.trim();
        return wallet;
    });
}
function setWallet(newWallet, wallet) {
    let choice;
    switch (wallet.type) {
        case 'web':
            choice = OSLink.WEB;
            break;
        case 'extension':
            choice = OSLink.EXTENSION;
            break;
        case 'ios':
            choice = OSLink.IOS;
            break;
        default:
            choice = OSLink.DESKTOP;
    }
    newWallet.links[choice] = wallet.type === 'ios' ? wallet.deepLink ?? wallet.link : wallet.link;
}
export function arrangeTopWallets(arr, walletIds) {
    const idsToMoveToFront = walletIds.slice(0, 4);
    const itemsToMoveToFront = [];
    const itemsToSortByName = [];
    for (let item of arr) {
        let position = undefined;
        idsToMoveToFront.some((id, index) => {
            const isWallet = item.key.startsWith(id);
            if (isWallet) {
                position = index;
            }
            return isWallet;
        });
        if (typeof position !== 'undefined') {
            itemsToMoveToFront[position] = item;
        }
        else {
            itemsToSortByName.push(item);
        }
    }
    itemsToSortByName.sort((a, b) => {
        if (a.name < b.name) {
            return -1;
        }
        else if (a.name > b.name) {
            return 1;
        }
        else {
            return 0;
        }
    });
    return [...itemsToMoveToFront, ...itemsToSortByName];
}
export function mergeWallets(wallets) {
    const mergedWallets = [];
    for (let i = 0; i < wallets.length; i++) {
        const wallet = wallets[i];
        const mergedWalletsNames = mergedWallets.map((_wallet) => _wallet.name);
        if (mergedWalletsNames.includes(wallet.name)) {
            const index = mergedWallets.findIndex((_wallet) => _wallet.name === wallet.name);
            if (index < 0) {
                console.error('There should be a wallet');
            }
            if (!mergedWallets[index].descriptions.includes(wallet.description)) {
                setWallet(mergedWallets[index], wallet);
                mergedWallets[index].descriptions.push(wallet.description);
            }
            mergedWallets[index].types.push(wallet.type);
            mergedWallets[index].deepLink = wallet.deepLink;
            mergedWallets[index].firefoxId = wallet.key.includes('firefox')
                ? wallet.id
                : mergedWallets[index].firefoxId;
        }
        else {
            const newWallet = {
                ...wallet,
                descriptions: [wallet.description],
                links: ['', '', '', ''],
                types: [wallet.type],
                firefoxId: wallet.key.includes('firefox') ? wallet.id : undefined
            };
            setWallet(newWallet, wallet);
            mergedWallets.push(newWallet);
        }
    }
    return mergedWallets;
}
