import axios from 'axios';
import { keys } from '@airgap/beacon-utils';
import { Logger } from '@airgap/beacon-core';
const logger = new Logger('MatrixHttpClient');
const CLIENT_API_R0 = '/_matrix/client/r0';
/**
 * Handling the HTTP connection to the matrix synapse node
 */
export class MatrixHttpClient {
    baseUrl;
    cancelTokenSource;
    constructor(baseUrl) {
        this.baseUrl = baseUrl;
        this.cancelTokenSource = axios.CancelToken.source();
    }
    /**
     * Get data from the synapse node
     *
     * @param endpoint
     * @param options
     */
    async get(endpoint, params, options) {
        return this.send('GET', endpoint, options, params);
    }
    /**
     * Post data to the synapse node
     *
     * @param endpoint
     * @param body
     * @param options
     * @param params
     */
    async post(endpoint, body, options, params) {
        return this.send('POST', endpoint, options, params, body);
    }
    /**
     * Put data to the synapse node
     *
     * @param endpoint
     * @param body
     * @param options
     * @param params
     */
    async put(endpoint, body, options, params) {
        return this.send('PUT', endpoint, options, params, body);
    }
    async cancelAllRequests() {
        return this.cancelTokenSource.cancel('Manually cancelled');
    }
    /**
     * Send a request to the synapse node
     *
     * @param method
     * @param endpoint
     * @param config
     * @param requestParams
     * @param data
     */
    async send(method, endpoint, config, requestParams, data) {
        const headers = config ? this.getHeaders(config) : undefined;
        const params = requestParams ? this.getParams(requestParams) : undefined;
        let response;
        try {
            response = await axios.request({
                method,
                url: endpoint,
                baseURL: this.apiUrl(CLIENT_API_R0),
                headers,
                data,
                params,
                cancelToken: this.cancelTokenSource.token
            });
        }
        catch (error) {
            const axiosError = error;
            logger.error('send', axiosError.code, axiosError.message, axiosError.response.data);
            throw error.response.data;
        }
        return response.data;
    }
    /**
     * Get the headers based on the options object
     *
     * @param options
     */
    getHeaders(options) {
        const headers = {};
        const entries = [];
        if (options.accessToken) {
            entries.push(['Authorization', `Bearer ${options.accessToken}`]);
        }
        if (entries.length === 0) {
            return undefined;
        }
        for (const [key, value] of entries) {
            headers[key] = value;
        }
        return headers;
    }
    /**
     * Get parameters
     *
     * @param _params
     */
    getParams(_params) {
        if (!_params) {
            return undefined;
        }
        const params = Object.assign(_params, {});
        keys(params).forEach((key) => params[key] === undefined && delete params[key]);
        return params;
    }
    /**
     * Construct API URL
     */
    apiUrl(...parts) {
        const apiBase = this.baseUrl.endsWith('/')
            ? this.baseUrl.substr(0, this.baseUrl.length - 1)
            : this.baseUrl;
        const apiParts = parts.map((path) => (path.startsWith('/') ? path.substr(1) : path));
        return [apiBase, ...apiParts].join('/');
    }
}
//# sourceMappingURL=MatrixHttpClient.js.map