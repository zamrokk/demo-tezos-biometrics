/**
 * A service to help with matrix event management
 */
export class MatrixEventService {
    httpClient;
    cachedPromises = new Map();
    constructor(httpClient) {
        this.httpClient = httpClient;
    }
    /**
     * Get the latest state from the matrix node
     *
     * @param accessToken
     * @param options
     */
    async sync(accessToken, options) {
        return this.withCache('sync', () => this.httpClient.get('/sync', {
            timeout: options ? options.pollingTimeout : undefined,
            since: options ? options.syncToken : undefined
        }, { accessToken }));
    }
    /**
     * Send a message to a room
     *
     * @param accessToken
     * @param room
     * @param content
     * @param txnId
     */
    async sendMessage(accessToken, roomId, content, txnId) {
        return new Promise((resolve, reject) => this.scheduleEvent({
            accessToken,
            roomId,
            type: 'm.room.message',
            content,
            txnId,
            onSuccess: resolve,
            onError: reject
        }));
    }
    /**
     * Schedules an event to be sent to the node
     *
     * @param event
     */
    scheduleEvent(event) {
        // TODO: actual scheduling
        this.sendEvent(event);
    }
    /**
     * Send an event to the matrix node
     *
     * @param scheduledEvent
     */
    async sendEvent(scheduledEvent) {
        const { roomId, type, txnId, content, accessToken } = scheduledEvent;
        try {
            const response = await this.httpClient.put(`/rooms/${encodeURIComponent(roomId)}/send/${type}/${encodeURIComponent(txnId)}`, content, { accessToken });
            scheduledEvent.onSuccess(response);
        }
        catch (error) {
            scheduledEvent.onError(error);
        }
    }
    /**
     * Check the cache when interacting with the Matrix node, if there is an already ongoing call for the specified key, return its promise instead of duplicating the call.
     *
     * @param key
     * @param promiseProvider
     */
    withCache(key, promiseProvider) {
        let promise = this.cachedPromises.get(key);
        if (!promise) {
            promise = promiseProvider().finally(() => {
                this.cachedPromises.delete(key);
            });
            this.cachedPromises.set(key, promise);
        }
        return promise;
    }
}
//# sourceMappingURL=MatrixEventService.js.map