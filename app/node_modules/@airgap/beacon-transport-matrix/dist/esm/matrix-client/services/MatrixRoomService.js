import { MatrixRoomStatus } from '../models/MatrixRoom';
/**
 * A service to help with matrix room management
 */
export class MatrixRoomService {
    httpClient;
    constructor(httpClient) {
        this.httpClient = httpClient;
    }
    /**
     * Create a room
     *
     * @param accessToken
     * @param config
     */
    async createRoom(accessToken, config = {}) {
        return this.httpClient.post('/createRoom', config, { accessToken });
    }
    /**
     * Invite a user to a room
     *
     * @param accessToken
     * @param user
     * @param room
     */
    async inviteToRoom(accessToken, user, room) {
        if (room.status !== MatrixRoomStatus.JOINED && room.status !== MatrixRoomStatus.UNKNOWN) {
            return Promise.reject(`User is not a member of room ${room.id}.`);
        }
        return this.httpClient.post(`/rooms/${encodeURIComponent(room.id)}/invite`, { user_id: user }, { accessToken });
    }
    /**
     * Join a specific room
     *
     * @param accessToken
     * @param room
     */
    async joinRoom(accessToken, room) {
        if (room.status === MatrixRoomStatus.JOINED) {
            return Promise.resolve({ room_id: room.id });
        }
        return this.httpClient.post(`/rooms/${encodeURIComponent(room.id)}/join`, {}, { accessToken });
    }
    /**
     * Get all joined rooms
     *
     * @param accessToken
     */
    async getJoinedRooms(accessToken) {
        return this.httpClient.get(`/joined_rooms`, undefined, { accessToken });
    }
}
//# sourceMappingURL=MatrixRoomService.js.map