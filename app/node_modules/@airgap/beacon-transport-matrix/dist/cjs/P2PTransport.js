"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.P2PTransport = void 0;
const beacon_core_1 = require("@airgap/beacon-core");
const beacon_types_1 = require("@airgap/beacon-types");
const beacon_transport_matrix_1 = require("@airgap/beacon-transport-matrix");
const logger = new beacon_core_1.Logger('P2PTransport');
/**
 * @internalapi
 *
 *
 */
class P2PTransport extends beacon_core_1.Transport {
    constructor(name, keyPair, storage, matrixNodes, storageKey, iconUrl, appUrl) {
        super(name, new beacon_transport_matrix_1.P2PCommunicationClient(name, keyPair, 1, storage, matrixNodes, iconUrl, appUrl), new beacon_core_1.PeerManager(storage, storageKey));
        this.type = beacon_types_1.TransportType.P2P;
    }
    static isAvailable() {
        return __awaiter(this, void 0, void 0, function* () {
            return Promise.resolve(true);
        });
    }
    connect() {
        const _super = Object.create(null, {
            connect: { get: () => super.connect }
        });
        return __awaiter(this, void 0, void 0, function* () {
            if (this._isConnected !== beacon_types_1.TransportStatus.NOT_CONNECTED) {
                return;
            }
            logger.log('connect');
            this._isConnected = beacon_types_1.TransportStatus.CONNECTING;
            yield this.client.start();
            const knownPeers = yield this.getPeers();
            if (knownPeers.length > 0) {
                logger.log('connect', `connecting to ${knownPeers.length} peers`);
                const connectionPromises = knownPeers.map((peer) => __awaiter(this, void 0, void 0, function* () { return this.listen(peer.publicKey); }));
                Promise.all(connectionPromises).catch((error) => logger.error('connect', error));
            }
            yield this.startOpenChannelListener();
            return _super.connect.call(this);
        });
    }
    disconnect() {
        const _super = Object.create(null, {
            disconnect: { get: () => super.disconnect }
        });
        return __awaiter(this, void 0, void 0, function* () {
            yield this.client.stop();
            return _super.disconnect.call(this);
        });
    }
    startOpenChannelListener() {
        return __awaiter(this, void 0, void 0, function* () {
            //
        });
    }
    getPairingRequestInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.client.getPairingRequestInfo();
        });
    }
    listen(publicKey) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.client
                .listenForEncryptedMessage(publicKey, (message) => {
                const connectionContext = {
                    origin: beacon_types_1.Origin.P2P,
                    id: publicKey
                };
                this.notifyListeners(message, connectionContext).catch((error) => {
                    throw error;
                });
            })
                .catch((error) => {
                throw error;
            });
        });
    }
}
exports.P2PTransport = P2PTransport;
//# sourceMappingURL=P2PTransport.js.map