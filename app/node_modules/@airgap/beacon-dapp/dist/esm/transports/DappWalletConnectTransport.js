import { StorageKey, TransportStatus } from '@airgap/beacon-types';
import { Logger } from '@airgap/beacon-core';
import { WalletConnectTransport } from '@airgap/beacon-transport-walletconnect';
const logger = new Logger('DappWalletConnectTransport');
/**
 * @internalapi
 *
 *
 */
export class DappWalletConnectTransport extends WalletConnectTransport {
    constructor(name, keyPair, storage, wcOptions) {
        super(name, keyPair, storage, StorageKey.TRANSPORT_WALLETCONNECT_PEERS_DAPP, wcOptions);
        this.client.listenForChannelOpening(async (peer) => {
            await this.addPeer(peer);
            this._isConnected = TransportStatus.CONNECTED;
            if (this.newPeerListener) {
                this.newPeerListener(peer);
                this.newPeerListener = undefined; // TODO: Remove this once we use the id
            }
        });
    }
    async listenForNewPeer(newPeerListener) {
        // logger.log('listenForNewPeer')
        this.newPeerListener = newPeerListener;
    }
    async stopListeningForNewPeers() {
        logger.log('stopListeningForNewPeers');
        this.newPeerListener = undefined;
    }
}
//# sourceMappingURL=DappWalletConnectTransport.js.map