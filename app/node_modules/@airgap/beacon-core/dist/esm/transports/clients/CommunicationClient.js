import { toHex, getHexHash, sealCryptobox } from '@airgap/beacon-utils';
import { convertPublicKeyToX25519, convertSecretKeyToX25519 } from '@stablelib/ed25519';
import { clientSessionKeys, serverSessionKeys } from '@stablelib/x25519-session';
/**
 * @internalapi
 *
 *
 */
export class CommunicationClient {
    keyPair;
    constructor(keyPair) {
        this.keyPair = keyPair;
    }
    eventHandlers = new Map();
    /**
     * Get the public key
     */
    async getPublicKey() {
        return toHex(this.keyPair?.publicKey);
    }
    /**
     * get the public key hash
     */
    async getPublicKeyHash() {
        return getHexHash(this.keyPair.publicKey);
    }
    /**
     * Create a cryptobox server
     *
     * @param otherPublicKey
     * @param selfKeypair
     */
    async createCryptoBoxServer(otherPublicKey, selfKeypair) {
        return serverSessionKeys({
            publicKey: convertPublicKeyToX25519(selfKeypair.publicKey),
            secretKey: convertSecretKeyToX25519(selfKeypair.secretKey)
        }, convertPublicKeyToX25519(Buffer.from(otherPublicKey, 'hex')));
    }
    /**
     * Create a cryptobox client
     *
     * @param otherPublicKey
     * @param selfKeypair
     */
    async createCryptoBoxClient(otherPublicKey, selfKeypair) {
        return clientSessionKeys({
            publicKey: convertPublicKeyToX25519(selfKeypair.publicKey),
            secretKey: convertSecretKeyToX25519(selfKeypair.secretKey)
        }, convertPublicKeyToX25519(Buffer.from(otherPublicKey, 'hex')));
    }
    /**
     * Encrypt a message for a specific publicKey (receiver, asymmetric)
     *
     * @param recipientPublicKey
     * @param message
     */
    async encryptMessageAsymmetric(recipientPublicKey, message) {
        return sealCryptobox(message, Buffer.from(recipientPublicKey, 'hex'));
    }
}
//# sourceMappingURL=CommunicationClient.js.map