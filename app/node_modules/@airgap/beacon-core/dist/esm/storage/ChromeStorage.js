import { defaultValues } from '@airgap/beacon-types';
/**
 * @internalapi
 *
 * A storage that can be used in chrome extensions
 */
export class ChromeStorage {
    static async isSupported() {
        return (typeof window !== 'undefined' &&
            typeof chrome !== 'undefined' &&
            Boolean(chrome) &&
            Boolean(chrome.runtime) &&
            Boolean(chrome.runtime.id));
    }
    async get(key) {
        return new Promise((resolve) => {
            chrome.storage.local.get(null, (storageContent) => {
                if (storageContent[key]) {
                    resolve(storageContent[key]);
                }
                else {
                    if (typeof defaultValues[key] === 'object') {
                        resolve(JSON.parse(JSON.stringify(defaultValues[key])));
                    }
                    else {
                        resolve(defaultValues[key]);
                    }
                }
            });
        });
    }
    async set(key, value) {
        return new Promise((resolve) => {
            chrome.storage.local.set({ [key]: value }, () => {
                resolve();
            });
        });
    }
    async delete(key) {
        return new Promise((resolve) => {
            chrome.storage.local.set({ [key]: undefined }, () => {
                resolve();
            });
        });
    }
    async subscribeToStorageChanged(_callback) {
        // TODO
    }
    getPrefixedKey(key) {
        return key;
    }
}
//# sourceMappingURL=ChromeStorage.js.map