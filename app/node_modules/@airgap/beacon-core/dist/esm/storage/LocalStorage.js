import { Storage, defaultValues } from '@airgap/beacon-types';
/**
 * @internalapi
 *
 * A storage that can be used in the browser
 */
export class LocalStorage extends Storage {
    prefix;
    constructor(prefix) {
        super();
        this.prefix = prefix;
    }
    static async isSupported() {
        return Promise.resolve(Boolean(typeof window !== 'undefined') && Boolean(window.localStorage));
    }
    async get(key) {
        const value = localStorage.getItem(this.getPrefixedKey(key));
        if (!value) {
            if (typeof defaultValues[key] === 'object') {
                return JSON.parse(JSON.stringify(defaultValues[key]));
            }
            else {
                return defaultValues[key];
            }
        }
        else {
            try {
                return JSON.parse(value);
            }
            catch (jsonParseError) {
                return value; // TODO: Validate storage
            }
        }
    }
    async set(key, value) {
        if (typeof value === 'string') {
            return localStorage.setItem(this.getPrefixedKey(key), value);
        }
        else {
            return localStorage.setItem(this.getPrefixedKey(key), JSON.stringify(value));
        }
    }
    async delete(key) {
        return Promise.resolve(localStorage.removeItem(this.getPrefixedKey(key)));
    }
    async subscribeToStorageChanged(callback) {
        window.addEventListener('storage', (event) => {
            if (!event.key) {
                callback({
                    eventType: 'storageCleared',
                    key: null,
                    oldValue: null,
                    newValue: null
                });
            }
            else {
                callback({
                    eventType: 'entryModified',
                    key: this.getPrefixedKey(event.key),
                    oldValue: event.oldValue,
                    newValue: event.newValue
                });
            }
        }, false);
    }
    getPrefixedKey(key) {
        return this.prefix ? `${this.prefix}-${key}` : key;
    }
}
//# sourceMappingURL=LocalStorage.js.map