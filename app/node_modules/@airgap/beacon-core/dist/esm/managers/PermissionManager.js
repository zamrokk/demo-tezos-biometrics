import { StorageKey } from '@airgap/beacon-types';
import { StorageManager } from './StorageManager';
import { PermissionValidator } from './PermissionValidator';
/**
 * @internalapi
 *
 * The PermissionManager provides CRUD functionality for permission entities and persists them to the provided storage.
 */
export class PermissionManager {
    storageManager;
    constructor(storage) {
        this.storageManager = new StorageManager(storage, StorageKey.PERMISSION_LIST);
    }
    async getPermissions() {
        return (await this.storageManager.getAll()) ?? [];
    }
    async getPermission(accountIdentifier) {
        return this.storageManager.getOne((permission) => permission.accountIdentifier === accountIdentifier);
    }
    async addPermission(permissionInfo) {
        return this.storageManager.addOne(permissionInfo, (permission) => permission.accountIdentifier === permissionInfo.accountIdentifier &&
            permission.senderId === permissionInfo.senderId);
    }
    async removePermission(accountIdentifier) {
        return this.storageManager.remove((permissionInfo) => permissionInfo.accountIdentifier === accountIdentifier);
    }
    async removePermissions(accountIdentifiers) {
        return this.storageManager.remove((permission) => accountIdentifiers.includes(permission.accountIdentifier));
    }
    async removeAllPermissions() {
        return this.storageManager.removeAll();
    }
    async hasPermission(message) {
        return PermissionValidator.hasPermission(message, this.getPermission.bind(this), this.getPermissions.bind(this));
    }
}
//# sourceMappingURL=PermissionManager.js.map