import { StorageKey } from '@airgap/beacon-types';
import { StorageManager } from './StorageManager';
import { PermissionValidator } from './PermissionValidator';
/**
 * @internalapi
 *
 * The AccountManager provides CRUD functionality for account entities and persists them to the provided storage.
 */
export class AccountManager {
    storageManager;
    constructor(storage) {
        this.storageManager = new StorageManager(storage, StorageKey.ACCOUNTS);
    }
    async getAccounts() {
        return (await this.storageManager.getAll()) ?? [];
    }
    async getAccount(accountIdentifier) {
        return this.storageManager.getOne((account) => account.accountIdentifier === accountIdentifier);
    }
    async addAccount(accountInfo) {
        return this.storageManager.addOne(accountInfo, (account) => account.accountIdentifier === accountInfo.accountIdentifier);
    }
    async updateAccount(accountIdentifier, accountInfo) {
        const account = await this.getAccount(accountIdentifier);
        if (!account)
            return undefined;
        const newAccount = { ...account, ...accountInfo };
        await this.storageManager.addOne(newAccount, (account) => account.accountIdentifier === accountIdentifier, true);
        return newAccount;
    }
    async removeAccount(accountIdentifier) {
        return this.storageManager.remove((account) => account.accountIdentifier === accountIdentifier);
    }
    async removeAccounts(accountIdentifiers) {
        return this.storageManager.remove((account) => accountIdentifiers.includes(account.accountIdentifier));
    }
    async removeAllAccounts() {
        return this.storageManager.removeAll();
    }
    async hasPermission(message) {
        return PermissionValidator.hasPermission(message, this.getAccount.bind(this), this.getAccounts.bind(this));
    }
}
//# sourceMappingURL=AccountManager.js.map