import { StorageManager } from './StorageManager';
/**
 * @internalapi
 *
 * The PeerManager provides CRUD functionality for peer entities and persists them to the provided storage.
 */
export class PeerManager {
    storageManager;
    constructor(storage, key) {
        this.storageManager = new StorageManager(storage, key);
    }
    async hasPeer(publicKey) {
        return (await this.getPeer(publicKey)) ? true : false;
    }
    async getPeers() {
        return (await this.storageManager.getAll()) ?? [];
    }
    async getPeer(publicKey) {
        return this.storageManager.getOne((peer) => peer.publicKey === publicKey);
    }
    async addPeer(peerInfo) {
        return this.storageManager.addOne(peerInfo, (peer) => peer.publicKey === peerInfo.publicKey);
    }
    async removePeer(publicKey) {
        return this.storageManager.remove((peer) => peer.publicKey === publicKey);
    }
    async removePeers(publicKeys) {
        return this.storageManager.remove((peer) => publicKeys.includes(peer.publicKey));
    }
    async removeAllPeers() {
        return this.storageManager.removeAll();
    }
}
//# sourceMappingURL=PeerManager.js.map