import { BeaconMessageType, PermissionScope } from '@airgap/beacon-types';
import { getAccountIdentifier } from '../utils/get-account-identifier';
/**
 * @internalapi
 *
 * The PermissionValidator is used to check if permissions for a certain message type have been given
 */
export class PermissionValidator {
    /**
     * Check if permissions were given for a certain message type.
     *
     * PermissionRequest and BroadcastRequest will always return true.
     *
     * @param message Beacon Message
     */
    static async hasPermission(message, getOne, getAll) {
        switch (message.type) {
            case BeaconMessageType.PermissionRequest:
            case BeaconMessageType.BroadcastRequest: {
                return true;
            }
            case BeaconMessageType.OperationRequest: {
                const accountIdentifier = await getAccountIdentifier(message.sourceAddress, message.network);
                const permission = await getOne(accountIdentifier);
                if (!permission) {
                    return false;
                }
                return permission.scopes.includes(PermissionScope.OPERATION_REQUEST);
            }
            case BeaconMessageType.SignPayloadRequest: {
                const permissions = await getAll();
                const filteredPermissions = permissions.filter((permission) => permission.address === message.sourceAddress);
                if (filteredPermissions.length === 0) {
                    return false;
                }
                return filteredPermissions.some((permission) => permission.scopes.includes(PermissionScope.SIGN));
            }
            default:
                throw new Error('Message not handled');
        }
    }
}
//# sourceMappingURL=PermissionValidator.js.map