/* eslint-disable prefer-arrow/prefer-arrow-functions */
function fixArrayType(array) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return array;
}
/* eslint-enable prefer-arrow/prefer-arrow-functions */
/**
 * @internalapi
 *
 * The StorageManager provides CRUD functionality for specific entities and persists them to the provided storage.
 */
export class StorageManager {
    storage;
    storageKey;
    constructor(storage, storageKey) {
        this.storage = storage;
        this.storageKey = storageKey;
    }
    async getAll() {
        return (await this.storage.get(this.storageKey)) ?? [];
    }
    async getOne(predicate) {
        const entities = await this.storage.get(this.storageKey);
        return fixArrayType(entities).find(predicate);
    }
    async addOne(element, predicate, overwrite = true) {
        const entities = await this.storage.get(this.storageKey);
        if (!fixArrayType(entities).some(predicate)) {
            fixArrayType(entities).push(element);
        }
        else if (overwrite) {
            for (let i = 0; i < entities.length; i++) {
                if (predicate(fixArrayType(entities)[i])) {
                    entities[i] = element;
                }
            }
        }
        return this.storage.set(this.storageKey, entities);
    }
    async remove(predicate) {
        const entities = await this.storage.get(this.storageKey);
        const filteredEntities = fixArrayType(entities).filter((entity) => !predicate(entity));
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return this.storage.set(this.storageKey, filteredEntities);
    }
    async removeAll() {
        return this.storage.delete(this.storageKey);
    }
}
//# sourceMappingURL=StorageManager.js.map