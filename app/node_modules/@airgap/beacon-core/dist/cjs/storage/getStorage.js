"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStorage = void 0;
const Logger_1 = require("../utils/Logger");
const __1 = require("..");
const logger = new Logger_1.Logger('STORAGE');
/**
 * Get a supported storage on this platform
 */
const getStorage = () => __awaiter(void 0, void 0, void 0, function* () {
    if (yield __1.ChromeStorage.isSupported()) {
        logger.log('getStorage', 'USING CHROME STORAGE');
        return new __1.ChromeStorage();
    }
    else if (yield __1.LocalStorage.isSupported()) {
        logger.log('getStorage', 'USING LOCAL STORAGE');
        return new __1.LocalStorage();
    }
    else {
        throw new Error('no storage type supported');
    }
});
exports.getStorage = getStorage;
//# sourceMappingURL=getStorage.js.map