"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommunicationClient = void 0;
const beacon_utils_1 = require("@airgap/beacon-utils");
const ed25519_1 = require("@stablelib/ed25519");
const x25519_session_1 = require("@stablelib/x25519-session");
/**
 * @internalapi
 *
 *
 */
class CommunicationClient {
    constructor(keyPair) {
        this.keyPair = keyPair;
        this.eventHandlers = new Map();
    }
    /**
     * Get the public key
     */
    getPublicKey() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            return (0, beacon_utils_1.toHex)((_a = this.keyPair) === null || _a === void 0 ? void 0 : _a.publicKey);
        });
    }
    /**
     * get the public key hash
     */
    getPublicKeyHash() {
        return __awaiter(this, void 0, void 0, function* () {
            return (0, beacon_utils_1.getHexHash)(this.keyPair.publicKey);
        });
    }
    /**
     * Create a cryptobox server
     *
     * @param otherPublicKey
     * @param selfKeypair
     */
    createCryptoBoxServer(otherPublicKey, selfKeypair) {
        return __awaiter(this, void 0, void 0, function* () {
            return (0, x25519_session_1.serverSessionKeys)({
                publicKey: (0, ed25519_1.convertPublicKeyToX25519)(selfKeypair.publicKey),
                secretKey: (0, ed25519_1.convertSecretKeyToX25519)(selfKeypair.secretKey)
            }, (0, ed25519_1.convertPublicKeyToX25519)(Buffer.from(otherPublicKey, 'hex')));
        });
    }
    /**
     * Create a cryptobox client
     *
     * @param otherPublicKey
     * @param selfKeypair
     */
    createCryptoBoxClient(otherPublicKey, selfKeypair) {
        return __awaiter(this, void 0, void 0, function* () {
            return (0, x25519_session_1.clientSessionKeys)({
                publicKey: (0, ed25519_1.convertPublicKeyToX25519)(selfKeypair.publicKey),
                secretKey: (0, ed25519_1.convertSecretKeyToX25519)(selfKeypair.secretKey)
            }, (0, ed25519_1.convertPublicKeyToX25519)(Buffer.from(otherPublicKey, 'hex')));
        });
    }
    /**
     * Encrypt a message for a specific publicKey (receiver, asymmetric)
     *
     * @param recipientPublicKey
     * @param message
     */
    encryptMessageAsymmetric(recipientPublicKey, message) {
        return __awaiter(this, void 0, void 0, function* () {
            return (0, beacon_utils_1.sealCryptobox)(message, Buffer.from(recipientPublicKey, 'hex'));
        });
    }
}
exports.CommunicationClient = CommunicationClient;
//# sourceMappingURL=CommunicationClient.js.map