"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.migrate = void 0;
const constants_1 = require("../constants");
const beacon_types_1 = require("@airgap/beacon-types");
const migrate_0_7_0_1 = require("./migrate-0.7.0");
const migrations = [
    ['0.6.0', () => undefined],
    ['0.7.0', migrate_0_7_0_1.migrate_0_7_0]
];
// This is not used yet
const migrate = (storage) => __awaiter(void 0, void 0, void 0, function* () {
    const lastSdkVersion = yield storage.get(beacon_types_1.StorageKey.BEACON_SDK_VERSION);
    // Skip if we are on latest version
    if (lastSdkVersion && lastSdkVersion === constants_1.SDK_VERSION) {
        return;
    }
    let addMigration = false;
    for (const [version, migrationMethod] of migrations) {
        if (version === lastSdkVersion) {
            addMigration = true;
        }
        if (addMigration) {
            try {
                yield migrationMethod(storage);
            }
            catch (migrationError) {
                console.log(`Migration for ${version} failed!`, migrationError);
            }
        }
    }
    yield storage.set(beacon_types_1.StorageKey.BEACON_SDK_VERSION, constants_1.SDK_VERSION);
});
exports.migrate = migrate;
//# sourceMappingURL=migrations.js.map