"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAccountIdentifier = void 0;
const bs58check = require("bs58check");
const blake2b_1 = require("@stablelib/blake2b");
const utf8_1 = require("@stablelib/utf8");
/**
 * @internalapi
 *
 * Generate a deterministic account identifier based on an address and a network
 *
 * @param address
 * @param network
 */
const getAccountIdentifier = (address, network) => __awaiter(void 0, void 0, void 0, function* () {
    const data = [address, network.type];
    if (network.name) {
        data.push(`name:${network.name}`);
    }
    if (network.rpcUrl) {
        data.push(`rpc:${network.rpcUrl}`);
    }
    const buffer = Buffer.from((0, blake2b_1.hash)((0, utf8_1.encode)(data.join('-')), 10));
    return bs58check.encode(buffer);
});
exports.getAccountIdentifier = getAccountIdentifier;
//# sourceMappingURL=get-account-identifier.js.map