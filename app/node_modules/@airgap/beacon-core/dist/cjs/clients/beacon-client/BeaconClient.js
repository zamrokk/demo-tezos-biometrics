"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BeaconClient = void 0;
const beacon_utils_1 = require("@airgap/beacon-utils");
const beacon_utils_2 = require("@airgap/beacon-utils");
const beacon_types_1 = require("@airgap/beacon-types");
const constants_1 = require("../../constants");
const MockWindow_1 = require("../../MockWindow");
const MockAnalytics_1 = require("../../MockAnalytics");
/**
 * @internalapi
 *
 * The beacon client is an abstract client that handles everything that is shared between all other clients.
 * Specifically, it handles managing the beaconId and and the local keypair.
 */
class BeaconClient {
    get beaconId() {
        return this._beaconId.promise;
    }
    get keyPair() {
        return this._keyPair.promise;
    }
    constructor(config) {
        var _a, _b;
        /** The beaconId is a public key that is used to identify one specific application (dapp or wallet).
         * This is used inside a message to specify the sender, for example.
         */
        this._beaconId = new beacon_utils_1.ExposedPromise();
        /**
         * The local keypair that is used for the communication encryption
         */
        this._keyPair = new beacon_utils_1.ExposedPromise();
        if (!config.name) {
            throw new Error('Name not set');
        }
        if (!config.storage) {
            throw new Error('Storage not set');
        }
        this.name = config.name;
        this.iconUrl = config.iconUrl;
        this.appUrl = (_a = config.appUrl) !== null && _a !== void 0 ? _a : MockWindow_1.windowRef.location.origin;
        this.storage = config.storage;
        this.analytics = (_b = config.analytics) !== null && _b !== void 0 ? _b : new MockAnalytics_1.MockAnalytics();
        // TODO: This is a temporary "workaround" to prevent users from creating multiple Client instances
        if (MockWindow_1.windowRef.beaconCreatedClientInstance) {
            console.error('[BEACON] It looks like you created multiple Beacon SDK Client instances. This can lead to problems. Only create one instance and re-use it everywhere.');
        }
        else {
            ;
            MockWindow_1.windowRef.beaconCreatedClientInstance = true;
        }
        this.initSDK().catch(console.error);
    }
    /**
     * This resets the SDK. After using this method, this instance is no longer usable. You will have to instanciate a new client.
     */
    destroy() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.removeBeaconEntriesFromStorage();
            MockWindow_1.windowRef.beaconCreatedClientInstance = false;
        });
    }
    /**
     * This method initializes the SDK by setting some values in the storage and generating a keypair.
     */
    initSDK() {
        return __awaiter(this, void 0, void 0, function* () {
            this.storage.set(beacon_types_1.StorageKey.BEACON_SDK_VERSION, constants_1.SDK_VERSION).catch(console.error);
            this.loadOrCreateBeaconSecret().catch(console.error);
            return this.keyPair.then((keyPair) => {
                this._beaconId.resolve((0, beacon_utils_2.toHex)(keyPair.publicKey));
            });
        });
    }
    /**
     * Removes all beacon values from the storage.
     */
    removeBeaconEntriesFromStorage() {
        return __awaiter(this, void 0, void 0, function* () {
            const allKeys = Object.values(beacon_types_1.StorageKey);
            yield Promise.all(allKeys.map((key) => this.storage.delete(key)));
        });
    }
    /**
     * This method tries to load the seed from storage, if it doesn't exist, a new one will be created and persisted.
     */
    loadOrCreateBeaconSecret() {
        return __awaiter(this, void 0, void 0, function* () {
            const storageValue = yield this.storage.get(beacon_types_1.StorageKey.BEACON_SDK_SECRET_SEED);
            if (storageValue && typeof storageValue === 'string') {
                this._keyPair.resolve(yield (0, beacon_utils_2.getKeypairFromSeed)(storageValue));
            }
            else {
                const key = yield (0, beacon_utils_2.generateGUID)();
                yield this.storage.set(beacon_types_1.StorageKey.BEACON_SDK_SECRET_SEED, key);
                this._keyPair.resolve(yield (0, beacon_utils_2.getKeypairFromSeed)(key));
            }
        });
    }
}
exports.BeaconClient = BeaconClient;
//# sourceMappingURL=BeaconClient.js.map